---
- name: Configure Network Bridges and VLANs
  hosts: proxmox
  become: true
  vars:
    # Use configuration from site_config fact set by master playbook
    network_prefix: "{{ site_config.network_prefix }}"
    vlans: "{{ site_config.hardware.network.vlans }}"
    bridges: "{{ site_config.hardware.network.bridges }}"
    interfaces: "{{ site_config.hardware.network.interfaces }}"

    # Management VLAN IP (defaults to .50.10)
    mgmt_ip: "{{ network_prefix }}.50.10"

    # Interface mapping from site config
    wan_interface: "{{ interfaces | selectattr('role', 'equalto', 'wan') | map(attribute='name') | first }}"
    wan_backup_interface: "{{ interfaces | selectattr('role', 'equalto', 'wan_backup') | map(attribute='name') | first | default(none) }}"
    lan_interface: "{{ interfaces | selectattr('role', 'equalto', 'wifi') | map(attribute='name') | first | default(interfaces | selectattr('role', 'equalto', 'lan') | map(attribute='name') | first) }}"
    camera_interface: "{{ interfaces | selectattr('role', 'equalto', 'cameras') | map(attribute='name') | first | default(none) }}"

  tasks:
    - name: Check if transition has succeeded
      ansible.builtin.stat:
        path: "/sys/class/net/vmbr0.50"
      register: mgmt_vlan_status

    - name: Display network setup banner
      ansible.builtin.debug:
        msg:
          - "========================================================"
          - "Setting up Network Bridges and VLANs for {{ site_config.display_name }}"
          - "========================================================"
          - "Network prefix: {{ network_prefix }}"
          - "WAN interface: {{ wan_interface }}"
          - "{% if wan_backup_interface %}WAN backup: {{ wan_backup_interface }}{% endif %}"
          - "LAN interface: {{ lan_interface }}"
          - "{% if camera_interface %}Camera interface: {{ camera_interface }}{% endif %}"
          - "Management IP: {{ mgmt_ip }}"
          - "VLANs: {% for vlan in vlans %}{{ vlan.id }}({{ vlan.name }}) {% endfor %}"
          - "========================================================"

    # Set network kernel parameters for better performance
    - name: Set network interface kernel parameters
      ansible.posix.sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: true
      with_items:
        - { name: 'net.core.rmem_max', value: '16777216' }
        - { name: 'net.core.wmem_max', value: '16777216' }
        - { name: 'net.ipv4.tcp_rmem', value: '4096 87380 16777216' }
        - { name: 'net.ipv4.tcp_wmem', value: '4096 87380 16777216' }
        - { name: 'net.bridge.bridge-nf-call-iptables', value: '0' }
        - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '0' }

    # Configure network bridges from site configuration
    - name: Set up network bridges
      ansible.builtin.blockinfile:
        path: /etc/network/interfaces
        block: |
          # Bridge: {{ item.name }} - {{ item.description }}
          auto {{ item.name }}
          iface {{ item.name }} inet manual
              bridge-ports {{ item.interface }}
              bridge-stp off
              bridge-fd 0
          {% if item.vlans is defined %}
              bridge-vlan-aware yes
              bridge-vids {% for vlan in item.vlans %}{{ vlan }}{{ ' ' if not loop.last }}{% endfor %}
          {% endif %}
        marker: "# {mark} ANSIBLE MANAGED BLOCK - {{ item.name }}"
        create: yes
      loop: "{{ bridges }}"
      register: bridge_configs

    # Configure VLAN interfaces for all VLANs
    - name: Set up VLAN interfaces for each VLAN
      ansible.builtin.blockinfile:
        path: /etc/network/interfaces
        block: |
          # VLAN {{ item.id }} Interface ({{ item.name }})
          auto vmbr0.{{ item.id }}
          iface vmbr0.{{ item.id }} inet static
              address {{ item.gateway }}/24
              vlan-id {{ item.id }}
              vlan-raw-device vmbr0
          {% if item.id == 50 %}
              # Management VLAN - used for Proxmox access
          {% endif %}
        marker: "# {mark} ANSIBLE MANAGED BLOCK - VLAN {{ item.id }}"
        create: yes
      loop: "{{ vlans }}"
      when: item.dhcp | default(true)
      register: vlan_configs

    # Configure physical interface settings from site configuration
    - name: Configure physical network interfaces
      ansible.builtin.blockinfile:
        path: /etc/network/interfaces
        block: |
          # Interface: {{ item.name }} ({{ item.role }})
          auto {{ item.name }}
          iface {{ item.name }} inet manual
          {% if item.vlan is defined and item.vlan %}
              bridge-vlan-aware yes
              bridge-vids {% for vlan in item.vlan %}{{ vlan }}{{ ' ' if not loop.last }}{% endfor %}
          {% endif %}
        marker: "# {mark} ANSIBLE MANAGED BLOCK - {{ item.name }}"
        create: yes
      loop: "{{ interfaces }}"
      register: interface_configs

    # Install and configure DHCP server
    - name: Install DHCP server
      ansible.builtin.apt:
        name: isc-dhcp-server
        state: present

    - name: Create DHCP configuration directory
      ansible.builtin.file:
        path: /etc/dhcp/subnets
        state: directory
        mode: '0755'

    - name: Generate main DHCP configuration
      ansible.builtin.template:
        src: "{{ playbook_dir }}/../templates/dhcpd.conf.j2"
        dest: /etc/dhcp/dhcpd.conf
        mode: '0644'
      vars:
        domain_name: "{{ site_config.domain }}"
        dns_servers:
          - "{{ network_prefix }}.50.1"  # OPNsense
          - "1.1.1.1"
          - "8.8.8.8"
      register: dhcp_config

    - name: Create subnet configuration for each VLAN
      ansible.builtin.template:
        src: "{{ playbook_dir }}/../templates/dhcp_subnet.conf.j2"
        dest: "/etc/dhcp/subnets/subnet-{{ item.id }}.conf"
        mode: '0644'
      vars:
        vlan: "{{ item }}"
        network_prefix: "{{ network_prefix }}"
      loop: "{{ vlans }}"
      when: item.dhcp | default(true)
      register: subnet_configs

    - name: Include subnet configurations in main DHCP config
      ansible.builtin.lineinfile:
        path: /etc/dhcp/dhcpd.conf
        line: "include \"/etc/dhcp/subnets/subnet-{{ item.id }}.conf\";"
        insertafter: "^# Subnet configurations"
        create: yes
      loop: "{{ vlans }}"
      when: item.dhcp | default(true)

    - name: Configure DHCP server interfaces
      ansible.builtin.template:
        src: "{{ playbook_dir }}/../templates/dhcpd.default.j2"
        dest: /etc/default/isc-dhcp-server
        mode: '0644'
      vars:
        interfaces: "{{ vlans | selectattr('dhcp', 'equalto', true) | map(attribute='id') | map('regex_replace', '^(.*)$', 'vmbr0.\\1') | list }}"
      register: dhcp_interfaces

    # Create DHCP device reservations from site devices
    - name: Create DHCP reservations for configured devices
      ansible.builtin.template:
        src: "{{ playbook_dir }}/../templates/dhcp_reservations.conf.j2"
        dest: /etc/dhcp/dhcp_reservations.conf
        mode: '0644'
      vars:
        devices: "{{ site_devices }}"
      when: site_devices is defined and site_devices | length > 0
      register: dhcp_reservations

    - name: Include device reservations in DHCP config
      ansible.builtin.lineinfile:
        path: /etc/dhcp/dhcpd.conf
        line: "include \"/etc/dhcp/dhcp_reservations.conf\";"
        insertafter: "^# Device reservations"
        create: yes
      when: site_devices is defined and site_devices | length > 0

    # Create directories for DHCP leases
    - name: Ensure DHCP lease directory exists
      ansible.builtin.file:
        path: /var/lib/dhcp
        state: directory
        mode: '0755'

    # Restart services
    - name: Restart networking if configuration changed
      ansible.builtin.service:
        name: networking
        state: restarted
      when: bridge_configs.changed or vlan_configs.changed or interface_configs.changed
      register: restart_net
      failed_when:
        - restart_net is failed
        - "'Interface not found' not in restart_net.msg"

    - name: Enable and restart DHCP server
      ansible.builtin.service:
        name: isc-dhcp-server
        state: restarted
        enabled: true
      when: dhcp_config.changed or subnet_configs.changed or dhcp_interfaces.changed or dhcp_reservations.changed

    # Network validation
    - name: Verify bridge configurations
      ansible.builtin.command: brctl show
      register: bridge_status
      changed_when: false

    - name: Verify VLAN interface creation
      ansible.builtin.stat:
        path: "/sys/class/net/vmbr0.{{ item.id }}"
      register: vlan_interface_status
      loop: "{{ vlans }}"
      failed_when: false

    - name: Verify management network connectivity
      ansible.builtin.command: ping -c 1 {{ network_prefix }}.50.1
      register: management_ping
      failed_when: false
      changed_when: false

    - name: Verify DHCP server status
      ansible.builtin.service:
        name: isc-dhcp-server
        state: started
      register: dhcp_service_status

    - name: Display network setup results
      ansible.builtin.debug:
        msg:
          - "Network setup completed:"
          - "  - Bridges configured: {{ bridges | length }}"
          - "  - VLANs configured: {{ vlans | length }}"
          - "  - DHCP enabled on: {{ vlans | selectattr('dhcp', 'equalto', true) | list | length }} VLANs"
          - "  - Device reservations: {{ site_devices.keys() | list | length if site_devices is defined else 0 }}"
          - "  - Bridge status: {{ 'OK' if bridge_status.rc == 0 else 'Failed' }}"
          - "  - VLAN interfaces: {{ vlan_interface_status.results | selectattr('stat.exists', 'equalto', true) | list | length }}/{{ vlans | length }}"
          - "  - Management connectivity: {{ 'OK' if management_ping.rc == 0 else 'Failed' }}"
          - "  - DHCP service: {{ 'Running' if dhcp_service_status.state == 'started' else 'Failed' }}"
