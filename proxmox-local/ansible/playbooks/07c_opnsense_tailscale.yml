---
- name: Configure Tailscale on OPNsense Firewalls
  hosts: opnsense
  gather_facts: false
  vars:
    tailscale_interface_name: "tailscale0" # Default, can be overridden by site_config.tailscale.interface_name
    default_tailscale_firewall_rules:
      - description: "Allow DNS from Tailscale network to OPNsense (Tailscale interface)"
        interface: "{{ tailscale_interface_name }}" # Use the variable
        direction: "in"
        action: "pass"
        protocol: "tcp/udp" # DNS uses both
        source_net: "{{ site_config.tailscale.network | default('100.64.0.0/10') }}" # Tailscale CGNAT range, or site_config override
        destination_net: "{{ tailscale_interface_name }}ip" # OPNsense keyword for interface IP
        destination_port_range: "53"
        log: "{{ site_config.tailscale.log_default_rules | default(false) }}"
        enabled: true
      # Example: Allow Tailscale network to access OPNsense web UI (if desired, use with caution)
      # - description: "Allow Tailscale net to OPNsense WebUI (Tailscale interface)"
      #   interface: "{{ tailscale_interface_name }}"
      #   direction: "in"
      #   action: "pass"
      #   protocol: "tcp"
      #   source_net: "{{ site_config.tailscale.network | default('100.64.0.0/10') }}"
      #   destination_net: "{{ tailscale_interface_name }}ip"
      #   destination_port_range: "{{ site_config.opnsense.gui_port | default(443) }}"
      #   log: true
      #   enabled: false # Disabled by default for security
    # opn_api_host, opnsense_api_key, opnsense_api_secret, tailscale_auth_key, network_prefix
    # will be set in pre_tasks from site_config and environment variables.

  pre_tasks:
    - name: Determine site name from inventory hostname
      ansible.builtin.set_fact:
        site_name_from_inventory: "{{ inventory_hostname.split('-')[0] }}"
      when: "'-' in inventory_hostname"

    - name: Fail if site name cannot be determined from inventory hostname
      ansible.builtin.fail:
        msg: "Could not determine site name from inventory_hostname '{{ inventory_hostname }}'. Expected format: <site_name>-opnsense"
      when: site_name_from_inventory is not defined

    - name: Include site-specific variables
      ansible.builtin.include_vars:
        file: "group_vars/{{ site_name_from_inventory }}.yml"

    - name: Set site_config fact if not loaded directly
      ansible.builtin.set_fact:
        site_config: "{{ hostvars[inventory_hostname].site_config }}"
      when: site_config is not defined and hostvars[inventory_hostname].site_config is defined

    - name: Fail if site_config is not loaded
      ansible.builtin.fail:
        msg: "Failed to load site_config for {{ site_name_from_inventory }}."
      when: site_config is not defined

    - name: Set Tailscale and OPNsense API configuration variables
      ansible.builtin.set_fact:
        network_prefix: "{{ site_config.network_prefix }}"
        opnsense_api_key: "{{ lookup('env', site_config.opnsense_api_key_env) | default(omit) }}"
        opnsense_api_secret: "{{ lookup('env', site_config.opnsense_api_secret_env) | default(omit) }}"
        opn_api_host: "{{ inventory_hostname }}"
        opn_ssl_verify: "{{ site_config.opnsense.ssl_verify | default(false) }}"
        tailscale_auth_key: >-
          {{ lookup('env',
                     site_config.tailscale.auth_key_env | default('TF_VAR_tailscale_auth_key')) }}
        # tailscale_auth_key: "{{ site_config.tailscale.auth_key | default(lookup('env', 'TF_VAR_tailscale_auth_key')) }}" # Alternative

    - name: Configure site-specific Tailscale firewall rules (data-driven)
      ansibleguy.opnsense.firewall_rule:
        description: "{{ item.description | default('Tailscale rule for ' + site_config.name) }}"
        interface: "{{ item.interface }}" # e.g., tailscale0, vlan10, etc.
        direction: "{{ item.direction | default('in') }}"
        action: "{{ item.action | default('pass') }}"
        protocol: "{{ item.protocol | default('any') }}"
        source_net: "{{ item.source_net }}"
        destination_net: "{{ item.destination_net }}"
        destination_port_range: "{{ item.destination_port_range | default(omit) }}"
        log: "{{ item.log | default(site_config.tailscale.log_custom_rules | default(false)) }}"
        enabled: "{{ item.enabled | default(true) }}"
      loop: "{{ default_tailscale_firewall_rules + (site_config.tailscale.firewall_rules | default([])) }}"
      # Example site_config.tailscale.firewall_rules:
      # - { interface: '{{ tailscale_interface_name }}', source_net: '{{ site_config.tailscale.network | default("100.64.0.0/10") }}',

  tasks:
    - name: Check if Tailscale Auth Key is set
      ansible.builtin.fail:
        msg: "Tailscale Auth Key (e.g., TF_VAR_tailscale_auth_key or as defined in site_config.tailscale.auth_key_env) is not set."
      when: tailscale_auth_key is not defined or tailscale_auth_key == ""

    - name: Check if OPNsense API credentials are set
      ansible.builtin.fail:
        msg: "OPNsense API credentials (defined by site_config.opnsense_api_key_env and site_config.opnsense_api_secret_env) are not set."
      when: opnsense_api_key is not defined or opnsense_api_key == "" or opnsense_api_secret is not defined or opnsense_api_secret == ""

    - name: Ensure os-tailscale plugin is installed (using ansibleguy.opnsense module)
      ansibleguy.opnsense.package:
        name: os-tailscale
        state: present
      # Consider adding notify for service reload if this module doesn't handle it.

    - name: Configure Tailscale Service (using ansibleguy.opnsense module if available, fallback to URI)
      # Attempt to use ansibleguy.opnsense.tailscale_general if it exists and supports these settings.
      # For now, sticking to URI to match original playbook structure, but this is a candidate for module usage.
      ansible.builtin.uri:
        url: "https://{{ opn_api_host }}/api/tailscale/service/set"
        method: POST
        user: "{{ opnsense_api_key }}"
        password: "{{ opnsense_api_secret }}"
        force_basic_auth: true
        validate_certs: "{{ opn_ssl_verify }}"
        body_format: json
        body:
          service:
            enabled: "{{ site_config.tailscale.enabled | default(true) | ternary('1','0') }}"
            auth_key: "{{ tailscale_auth_key }}"
            advertise_routes: "{{ site_config.tailscale.advertised_routes | default([]) | join(',') }}"
            accept_routes: "{{ site_config.tailscale.accept_routes | default(true) | ternary('1','0') }}"
            hostname: "{{ site_config.tailscale.hostname | default('opnsense-' + site_config.name) }}"
            advertise_exit_node: "{{ site_config.tailscale.advertise_exit_node | default(false) | ternary('1','0') }}"
            exit_node_allow: "{{ site_config.tailscale.exit_node_allow_lan_access | default(true) | ternary('1','0') }}" # Name might differ in API
            use_exit_node: "{{ site_config.tailscale.use_exit_node_ip | default('') != '' | ternary('1','0') }}"
            exit_node: "{{ site_config.tailscale.use_exit_node_ip | default('') }}"
            # up_flags: >-
            #   {{ site_config.tailscale.up_flags |
            #      default('--accept-routes --advertise-routes=' +
            #              (site_config.tailscale.advertised_routes | default([]) | join(','))) }}
            # interfacemap might need specific handling if used
        status_code: [200, 201, 202]
      notify: Reload Tailscale Service # Handler to apply changes

    - name: Allow Tailscale WireGuard traffic on WAN interfaces (using ansibleguy.opnsense module)
      ansibleguy.opnsense.firewall_rule:
        description: "Allow Tailscale Inbound on {{ wan_if.name }} for {{ site_config.name }}"
        interface: "{{ wan_if.name }}" # Logical name of the WAN interface
        direction: "in"
        action: "pass"
        protocol: "udp"
        source_net: "any"
        destination_net: "any" # Or WAN IP alias
        destination_port_range: "{{ site_config.tailscale.port | default('41641') }}"
        log: "{{ site_config.tailscale.log_wan_rule | default(false) }}"
        enabled: true
      loop: "{{ site_config.opnsense.interfaces | selectattr('role', 'equalto', 'wan') | list }}"
      loop_control:
        loop_var: wan_if
      when: site_config.opnsense.interfaces is defined
      notify: Apply Firewall Changes # Handler

    - name: Configure site-specific Tailscale firewall rules (data-driven)
      ansibleguy.opnsense.firewall_rule:
        description: "{{ item.description | default('Tailscale rule for ' + site_config.name) }}"
        interface: "{{ item.interface }}" # e.g., tailscale0, vlan10, etc.
        direction: "{{ item.direction | default('in') }}"
        action: "{{ item.action | default('pass') }}"
        protocol: "{{ item.protocol | default('any') }}"
        source_net: "{{ item.source_net }}"
        destination_net: "{{ item.destination_net }}"
        destination_port_range: "{{ item.destination_port_range | default(omit) }}"
        log: "{{ item.log | default(site_config.tailscale.log_custom_rules | default(false)) }}"
        enabled: "{{ item.enabled | default(true) }}"
      loop: "{{ default_tailscale_firewall_rules + (site_config.tailscale.firewall_rules | default([])) }}"
      # Example site_config.tailscale.firewall_rules:
      # - { interface: '{{ tailscale_interface_name }}', source_net: '{{ site_config.tailscale.network | default("100.64.0.0/10") }}',
      notify: Apply Firewall Changes # Handler

  handlers:
    - name: Reload Tailscale Service
      ansible.builtin.uri:
        url: "https://{{ opn_api_host }}/api/tailscale/service/reconfigure"
        method: POST
        user: "{{ opnsense_api_key }}"
        password: "{{ opnsense_api_secret }}"
        force_basic_auth: true
        validate_certs: "{{ opn_ssl_verify }}"
        status_code: [200, 201, 202]
      listen: "Reload Tailscale Service"

    - name: Apply Firewall Changes
      ansible.builtin.uri:
        url: "https://{{ opn_api_host }}/api/firewall/filter/apply"
        method: POST
        user: "{{ opnsense_api_key }}"
        password: "{{ opnsense_api_secret }}"
        force_basic_auth: true
        validate_certs: "{{ opn_ssl_verify }}"
        status_code: [200, 201, 202]
      listen: "Apply Firewall Changes"
