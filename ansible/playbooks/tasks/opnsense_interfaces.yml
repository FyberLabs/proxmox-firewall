---
# Configure OPNsense interfaces dynamically based on site configuration

# Get site details based on inventory hostname or group
- name: Determine site details
  ansible.builtin.set_fact:
    site_name: "{{ site_config.name }}"
    site_display_name: "{{ site_config.display_name }}"
    network_prefix: "{{ site_config.network_prefix }}"
    domain: "{{ site_config.domain }}"
    env_prefix: "{{ site_config.name | upper }}"

# Configure WAN fiber gateway
- name: Configure WAN Fiber Gateway
  ansible.builtin.uri:
    url: "https://{{ opn_api_host }}/api/routes/gateway/setItem/WAN_FIBER"
    method: POST
    user: "{{ opnsense_api_key }}"
    password: "{{ opnsense_api_secret }}"
    force_basic_auth: true
    validate_certs: false
    body_format: json
    body:
      gateway:
        name: "WAN_FIBER"
        interface: "wan"
        gateway: ""  # Automatically detected
        monitor: ""  # Default monitor
        description: "Fiber (Primary)"
        priority: "1"
        weight: "1"
        ipprotocol: "inet"
        monitor_disable: "0"
    status_code: [200, 201, 202]
  register: wan_fiber_gateway

# Configure WAN Starlink gateway
- name: Configure WAN Starlink Gateway
  ansible.builtin.uri:
    url: "https://{{ opn_api_host }}/api/routes/gateway/setItem/WAN_STARLINK"
    method: POST
    user: "{{ opnsense_api_key }}"
    password: "{{ opnsense_api_secret }}"
    force_basic_auth: true
    validate_certs: false
    body_format: json
    body:
      gateway:
        name: "WAN_STARLINK"
        interface: "opt2"  # Starlink interface
        gateway: ""  # Automatically detected
        monitor: ""  # Default monitor
        description: "Starlink (Backup)"
        priority: "2"
        weight: "1"
        ipprotocol: "inet"
        monitor_disable: "0"
    status_code: [200, 201, 202]
  register: wan_starlink_gateway

- name: Configure physical interfaces
  ansibleguy.opnsense.interface:
    name: "{{ item.name }}"
    device: "{{ item.device }}"
    descr: "{{ item.descr }}"
    enable: true
  loop: "{{ opnsense.interfaces }}"

# Configure VLANs
- name: Configure VLANs
  ansibleguy.opnsense.vlan:
    device: "{{ item.device }}"
    tag: "{{ item.tag }}"
    descr: "{{ item.descr }}"
    enable: true
  loop:
    - device: lan
      tag: 10
      descr: "VLAN10 - {{ vlan_config.10.name }} ({{ network_prefix }}.10.0/24)"
    - device: lan
      tag: 30
      descr: "VLAN30 - {{ vlan_config.30.name }} ({{ network_prefix }}.30.0/24)"
    - device: lan
      tag: 40
      descr: "VLAN40 - {{ vlan_config.40.name }} ({{ network_prefix }}.40.0/24)"
    - device: lan
      tag: 50
      descr: "VLAN50 - {{ vlan_config.50.name }} ({{ network_prefix }}.50.0/24)"
    - device: opt1
      tag: 20
      descr: "VLAN20 - {{ vlan_config.20.name }} ({{ network_prefix }}.20.0/24)"

# Configure interface IPs
- name: Configure interface IP assignments
  ansibleguy.opnsense.interface_ip:
    interface: "{{ item.interface }}"
    type: "{{ item.type }}"
    ipv4_address: "{{ item.ipv4_address | default(omit) }}"
    ipv4_prefixlen: "{{ item.ipv4_prefixlen | default(omit) }}"
    apply: true
  loop:
    - interface: lan
      type: none
    - interface: wan
      type: dhcp
    - interface: opt1
      type: none
    - interface: opt2
      type: dhcp
    - interface: pxmg
      type: static
      ipv4_address: "{{ network_prefix }}.50.1"
      ipv4_prefixlen: 24
    - interface: vlan10
      type: static
      ipv4_address: "{{ network_prefix }}.10.1"
      ipv4_prefixlen: 24
    - interface: vlan20
      type: static
      ipv4_address: "{{ network_prefix }}.20.1"
      ipv4_prefixlen: 24
    - interface: vlan30
      type: static
      ipv4_address: "{{ network_prefix }}.30.1"
      ipv4_prefixlen: 24
    - interface: vlan40
      type: static
      ipv4_address: "{{ network_prefix }}.40.1"
      ipv4_prefixlen: 24
    - interface: vlan50
      type: static
      ipv4_address: "{{ network_prefix }}.50.254"
      ipv4_prefixlen: 24

# Configure DHCP servers for each VLAN
- name: Configure DHCP servers
  ansibleguy.opnsense.dhcp_subnet:
    interface: "{{ item.interface }}"
    enabled: true
    range_from: "{{ item.range_from }}"
    range_to: "{{ item.range_to }}"
    gateway: "{{ item.gateway }}"
    domain: "{{ domain }}"
    dns_servers: ["{{ network_prefix }}.10.1"]
  loop:
    - interface: vlan10
      range_from: "{{ network_prefix }}.10.100"
      range_to: "{{ network_prefix }}.10.254"
      gateway: "{{ network_prefix }}.10.1"
    - interface: vlan20
      range_from: "{{ network_prefix }}.20.10"
      range_to: "{{ network_prefix }}.20.254"
      gateway: "{{ network_prefix }}.20.1"
    - interface: vlan30
      range_from: "{{ network_prefix }}.30.100"
      range_to: "{{ network_prefix }}.30.254"
      gateway: "{{ network_prefix }}.30.1"
    - interface: vlan40
      range_from: "{{ network_prefix }}.40.100"
      range_to: "{{ network_prefix }}.40.254"
      gateway: "{{ network_prefix }}.40.1"
    - interface: vlan50
      range_from: "{{ network_prefix }}.50.100"
      range_to: "{{ network_prefix }}.50.253"
      gateway: "{{ network_prefix }}.50.254"

# Create dynamic list of DHCP static mappings based on site config
- name: Generate DHCP static mapping list
  ansible.builtin.set_fact:
    dhcp_reservations: >-
      {{ dhcp_reservations | default([]) + [
        {
          'interface': 'vlan' + vlan|string,
          'mac': lookup('env', env_prefix + '_' + device|upper + '_MAC'),
          'ip': network_prefix + '.' + vlan|string + '.' + vlan_config[vlan|int].devices[device].ip_suffix,
          'hostname': device,
          'descr': vlan_config[vlan|int].devices[device].description
        }
      ] }}
  loop: "{{ vlan_device_pairs }}"
  loop_control:
    loop_var: item_pair
  vars:
    vlan: "{{ item_pair.0 }}"
    device: "{{ item_pair.1 }}"
    vlan_device_pairs: >-
      {{ vlan_config | dict2items |
         selectattr('value.devices', 'defined') |
         map(attribute='value.devices') | list |
         zip_longest(vlan_config | dict2items |
                    selectattr('value.devices', 'defined') |
                    map(attribute='key')|list) |
         map('reverse')|list }}
  when: lookup('env', env_prefix + '_' + device|upper + '_MAC')|default('') != ''

# Configure DHCP static mappings
- name: Configure DHCP static mappings
  ansibleguy.opnsense.dhcp_reservation:
    interface: "{{ item.interface }}"
    mac: "{{ item.mac }}"
    ip: "{{ item.ip }}"
    hostname: "{{ item.hostname }}"
    descr: "{{ item.descr }}"
    state: present
  loop: "{{ dhcp_reservations }}"
  when: dhcp_reservations is defined
