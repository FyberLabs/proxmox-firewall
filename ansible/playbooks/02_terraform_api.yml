---
- name: Set up Terraform API Access
  hosts: proxmox
  become: true
  tasks:
    - name: Check if Terraform role exists
      ansible.builtin.command: pveum role list
      register: role_list
      changed_when: false

    - name: Create Terraform role
      ansible.builtin.command: >
        pveum role add TerraformProv -privs "Datastore.AllocateSpace Datastore.AllocateTemplate Datastore.Audit
        Pool.Allocate Sys.Audit Sys.Console Sys.Modify VM.Allocate VM.Audit VM.Clone VM.Config.CDROM
        VM.Config.Cloudinit VM.Config.CPU VM.Config.Disk VM.Config.HWType VM.Config.Memory VM.Config.Network
        VM.Config.Options VM.Migrate VM.Monitor VM.PowerMgmt SDN.Use"
      register: role_result
      when: "'TerraformProv' not in role_list.stdout"
      changed_when: role_result.rc == 0

    - name: Check if Terraform user exists
      ansible.builtin.command: pveum user list
      register: user_list
      changed_when: false

    - name: Generate Terraform user password
      ansible.builtin.set_fact:
        credentials_path: "{{ playbook_dir }}/../credentials"
        password_file: "{{ inventory_hostname }}_tfuser_password"
      when: "'tfuser@pve' not in user_list.stdout"

    - name: Create Terraform user
      ansible.builtin.command: >
        pveum user add tfuser@pve --password "{{ lookup('password', credentials_path + '/' + password_file + ' chars=ascii_letters,digits length=20') }}"
      register: user_result
      when: "'tfuser@pve' not in user_list.stdout"
      changed_when: user_result.rc == 0

    - name: Assign role to user
      ansible.builtin.command: pveum aclmod / -user tfuser@pve -role TerraformProv
      register: acl_result
      changed_when: acl_result.rc == 0

    - name: Check if API token exists
      ansible.builtin.command: pveum user token list tfuser@pve
      register: token_list
      changed_when: false

    - name: Create API token
      ansible.builtin.command: pveum user token add tfuser@pve terraform --privsep 0
      register: token_output
      when: "'terraform' not in token_list.stdout"
      changed_when: token_output.rc == 0

    - name: Extract API token
      ansible.builtin.set_fact:
        api_token: "{{ token_output.stdout | regex_search('value:\\s+([^\\s]+)', '\\1') | first }}"
      when: token_output.stdout is defined and token_output.stdout | length > 0

    - name: Save API token to local file
      ansible.builtin.copy:
        content: "{{ api_token }}"
        dest: "{{ playbook_dir }}/../credentials/{{ inventory_hostname }}_api_token.txt"
        mode: '0600'
      delegate_to: localhost
      when: api_token is defined

    - name: Update location-specific API token in .env
      ansible.builtin.lineinfile:
        path: "{{ playbook_dir }}/../.env"
        regexp: "^{{ location_prefix | upper }}_PROXMOX_API_SECRET="
        line: "{{ location_prefix | upper }}_PROXMOX_API_SECRET=\"{{ api_token }}\""
        create: true
        mode: '0600'
      delegate_to: localhost
      when: api_token is defined
