---
# Configure OPNsense interfaces dynamically based on site configuration

- name: Assumed site_config is loaded by the calling playbook (e.g., 06_opnsense_setup.yml)
  ansible.builtin.assert:
    that:
      - site_config is defined
      - site_config.name is defined
      - site_config.network_prefix is defined
      - site_config.domain is defined
      - site_config.opnsense is defined
      - site_config.opnsense.interfaces is defined
      - site_config.vlan_config is defined
    fail_msg: "Required site_config variables are not defined. Ensure the calling playbook loads them correctly."

- name: Set easier to use facts from site_config
  ansible.builtin.set_fact:
    network_prefix: "{{ site_config.network_prefix }}"
    domain: "{{ site_config.domain }}"
    opnsense_interfaces: "{{ site_config.opnsense.interfaces }}"
    vlan_config: "{{ site_config.vlan_config }}" # Expects a dictionary with VLAN IDs as keys
    env_prefix_for_mac: "{{ site_config.name | upper }}"
    # opn_api_host, opnsense_api_key, opnsense_api_secret should be set by the calling playbook

# Configure physical interfaces based on site_config.opnsense.interfaces
# Ensure opn_api_host, opnsense_api_key, opnsense_api_secret are available in the environment
# or set by the calling playbook (06_opnsense_setup.yml does this)
- name: Configure physical interfaces
  ansibleguy.opnsense.interface:
    name: "{{ item.name }}"         # OPNsense logical name (e.g., LAN, WAN, OPT1)
    device: "{{ item.device }}"     # FreeBSD device name (e.g., igb0, vtnet0)
    descr: "{{ item.descr }}"
    enable: true
    # type, ipv4_address, ipv4_prefixlen for static assignment on physical if needed
    type: "{{ item.type | default(omit) }}"
    ipv4_address: "{{ item.ipv4_address | default(omit) }}"
    ipv4_prefixlen: "{{ item.ipv4_prefixlen | default(omit) }}"
  loop: "{{ opnsense_interfaces }}"
  loop_control:
    loop_var: item

# Configure VLANs based on site_config.vlan_config
- name: Configure VLANs
  ansibleguy.opnsense.vlan:
    # device is the parent interface (e.g., 'lan' or a specific physical interface name like 'igb1')
    device: "{{ vlan_config[item.tag | string].parent_interface | default(site_config.opnsense.default_vlan_parent_interface | default('lan')) }}"
    tag: "{{ item.tag }}"
    descr: "VLAN{{ item.tag }} - {{ item.name }} ({{ network_prefix }}.{{ item.tag }}.0/24)"
    enable: true
  loop: "{{ vlan_config | dict2items | map(attribute='value') | map('combine', {'tag': item.key}) | list }}" # Creates a list of dicts with tag and name
  loop_control:
    loop_var: item # item will be like { name: "Main LAN", tag: 10, devices: { ... } }

# Configure interface IP assignments (for VLANs and potentially some physical interfaces if not DHCP)
- name: Configure interface IP assignments for VLANs
  ansibleguy.opnsense.interface_ip:
    interface: "vlan{{ item.tag }}" # OPNsense logical interface name for the VLAN
    type: "static"
    ipv4_address: "{{ network_prefix }}.{{ item.tag }}.1" # Default gateway for the VLAN
    ipv4_prefixlen: 24
    apply: true
  loop: "{{ vlan_config | dict2items | map(attribute='value') | map('combine', {'tag': item.key}) | list }}"
  loop_control:
    loop_var: item # item will be like { name: "Main LAN", tag: 10, ... }

# Configure specific IP assignments for interfaces that are not VLANs (e.g., WANs if static, mgmt interfaces)
# This supplements the physical interface setup if more detail is needed than ansibleguy.opnsense.interface provides for IP.
# Example: Proxmox management interface if it's a dedicated interface on OPNsense
- name: Configure specific static interface IP assignments (non-VLAN)
  ansibleguy.opnsense.interface_ip:
    interface: "{{ item.name }}" # OPNsense logical name from site_config.opnsense.interfaces
    type: "{{ item.type }}" # e.g. static, dhcp
    ipv4_address: "{{ item.ipv4_address | default(omit) }}"
    ipv4_prefixlen: "{{ item.ipv4_prefixlen | default(omit) }}"
    apply: true
  loop: "{{ opnsense_interfaces | selectattr('type', 'defined') | list }}" # only loop if type is specified for IP config
  loop_control:
    loop_var: item


# Configure DHCP servers for each VLAN that needs it
- name: Configure DHCP servers for VLANs
  ansibleguy.opnsense.dhcp_subnet:
    interface: "vlan{{ item.tag }}"
    enabled: "{{ vlan_config[item.tag | string].dhcp.enabled | default(true) }}"
    range_from: "{{ vlan_config[item.tag | string].dhcp.range_from | default(network_prefix + '.' + (item.tag|string) + '.100') }}"
    range_to: "{{ vlan_config[item.tag | string].dhcp.range_to | default(network_prefix + '.' + (item.tag|string) + '.254') }}"
    gateway: "{{ network_prefix }}.{{ item.tag }}.1" # Assumes VLAN gateway is .1
    domain: "{{ domain }}"
    # DNS servers can be made configurable via site_config.vlan_config[item.tag].dhcp.dns_servers
    dns_servers: "{{ vlan_config[item.tag | string].dhcp.dns_servers | default([network_prefix + '.' + (item.tag|string) + '.1']) }}"
  loop: "{{ vlan_config | dict2items | map(attribute='value') | map('combine', {'tag': item.key}) | list }}"
  loop_control:
    loop_var: item
  when: "vlan_config[item.tag | string].dhcp is defined or vlan_config[item.tag | string].dhcp.enabled | default(true)"


# Prepare DHCP static mappings based on site_config.vlan_config.<vlan_id>.devices
- name: Generate list of DHCP static reservations
  ansible.builtin.set_fact:
    dhcp_static_reservations: "{{ dhcp_static_reservations | default([]) + reservation_details_list }}"
  vars:
    reservation_details_list: >-
      {% set reservations = [] %}
      {% for vlan_id, vlan_data in vlan_config.items() %}
        {% if vlan_data.devices is defined %}
          {% for device_name, device_info in vlan_data.devices.items() %}
            {% set mac_address = lookup('env', env_prefix_for_mac + '_' + device_name | upper + '_MAC') %}
            {% if mac_address %}
              {% set reservation = {
                  'interface': 'vlan' + vlan_id|string,
                  'mac': mac_address,
                  'ip': network_prefix + '.' + vlan_id|string + '.' + device_info.ip_suffix|string,
                  'hostname': device_name,
                  'descr': device_info.description | default(device_name)
              } %}
              {% set _ = reservations.append(reservation) %}
            {% endif %}
          {% endfor %}
        {% endif %}
      {% endfor %}
      {{ reservations }}

# Configure DHCP static mappings
- name: Configure DHCP static mappings from generated list
  ansibleguy.opnsense.dhcp_reservation:
    interface: "{{ item.interface }}"
    mac: "{{ item.mac }}"
    ip: "{{ item.ip }}"
    hostname: "{{ item.hostname }}"
    descr: "{{ item.descr }}"
    state: present
  loop: "{{ dhcp_static_reservations | default([]) }}"
  when: dhcp_static_reservations is defined and dhcp_static_reservations | length > 0

# Note: WAN gateway configuration (WAN_FIBER, WAN_STARLINK) was removed from here.
# It should be handled by the main playbook (06_opnsense_setup.yml) as it's more related to overall WAN strategy
# and might involve more than just interface setup (like gateway groups).
# The main playbook already has sections for WAN failover.
