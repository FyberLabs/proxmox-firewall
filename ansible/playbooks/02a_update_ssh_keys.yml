---
- name: Update SSH Authorized Keys for Proxmox Root
  hosts: proxmox
  become: true
  vars:
    # Path to authorized keys file in the repo
    repo_keys_file: "{{ playbook_dir }}/../ssh_authorized_keys"
    
  pre_tasks:
    - name: Check if repo keys file exists
      stat:
        path: "{{ repo_keys_file }}"
      register: repo_keys
      delegate_to: localhost
      
    - name: Check if local SSH key exists
      stat:
        path: "~/.ssh/id_rsa.pub"
      register: local_key
      delegate_to: localhost
      
    - name: Fail if no SSH keys are available
      fail:
        msg: >
          No SSH keys found. Either create '{{ repo_keys_file }}' with your public keys
          or ensure '~/.ssh/id_rsa.pub' exists. SSH keys are required to prevent lockout.
      when: not repo_keys.stat.exists and not local_key.stat.exists
      
    - name: Initialize SSH keys list
      set_fact:
        ssh_keys: []
        
    - name: Load keys from repo file
      set_fact:
        ssh_keys: "{{ ssh_keys + [ { 'name': item | regex_replace('^(.*)\\s.*$', '\\1') | default('repo_key_' + loop.index | string), 'state': 'present', 'key': item } ] }}"
      loop: "{{ lookup('file', repo_keys_file).splitlines() }}"
      when: repo_keys.stat.exists and item | trim != ''
      
    - name: Add local key as fallback
      set_fact:
        ssh_keys: "{{ ssh_keys + [ { 'name': 'local_key', 'state': 'present', 'key': lookup('file', '~/.ssh/id_rsa.pub') } ] }}"
      when: not repo_keys.stat.exists and local_key.stat.exists
      
    - name: Show keys to be authorized
      debug:
        msg: "Will authorize the following keys: {{ ssh_keys | map(attribute='name') | list }}"
  
  tasks:
    - name: Ensure .ssh directory exists
      file:
        path: /root/.ssh
        state: directory
        mode: '0700'
        owner: root
        group: root

    - name: Ensure authorized_keys file exists
      file:
        path: /root/.ssh/authorized_keys
        state: touch
        mode: '0600'
        owner: root
        group: root
        modification_time: preserve
        access_time: preserve
      
    - name: Add/Remove SSH keys to authorized_keys
      authorized_key:
        user: root
        state: "{{ item.state }}"
        key: "{{ item.key }}"
        key_options: "{{ item.options | default(omit) }}"
        comment: "{{ item.name }}"
      loop: "{{ ssh_keys }}"
      when: ssh_keys | length > 0

    - name: Read current authorized keys
      slurp:
        src: /root/.ssh/authorized_keys
      register: authorized_keys_content

    - name: Display current authorized keys
      debug:
        msg: "Authorized SSH keys for root on {{ inventory_hostname }}:\n{{ authorized_keys_content.content | b64decode }}"
